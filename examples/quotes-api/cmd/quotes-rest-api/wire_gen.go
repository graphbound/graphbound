// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/graphbound/graphbound/examples/quotes-api/internal/http/rest"
	"github.com/graphbound/graphbound/examples/quotes-api/internal/quote"
	"github.com/graphbound/graphbound/examples/quotes-api/pkg/yeapi"
	"github.com/graphbound/graphbound/pkg/httpds"
	"github.com/graphbound/graphbound/pkg/log"
	"github.com/graphbound/graphbound/pkg/server"
	"github.com/hellofresh/health-go/v5"
)

// Injectors from wire.go:

func initializeAPI() (*API, func(), error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	clientURL := config.YeAPIURL
	appEnvironment := config.AppEnvironment
	sugaredLogger, cleanup, err := log.ProvideLogger(appEnvironment)
	if err != nil {
		return nil, nil, err
	}
	tracerProvider := yeapi.ProvideTracerProvider(appEnvironment)
	v := _wireValue
	client := yeapi.ProvideClient(clientURL, sugaredLogger, tracerProvider, v...)
	getQuoteUseCase := quote.ProvideGetQuoteUseCase(client, sugaredLogger)
	quoteController := rest.ProvideQuoteController(getQuoteUseCase, sugaredLogger)
	serverTracerProvider, cleanup2, err := server.ProvideTracerProvider(appEnvironment)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	version := _wireVersionValue
	healthCheck := yeapi.ProvideClientHealthCheck(clientURL)
	v2 := ProvideHealthChecks(healthCheck)
	engine := server.NewRESTServer(sugaredLogger, serverTracerProvider, version, v2)
	api := ProvideAPI(quoteController, engine)
	return api, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireValue        = []httpds.Plugin(nil)
	_wireVersionValue = server.Version("1.0.0")
)

// wire.go:

type API struct {
	quoteController rest.QuoteController[gin.Context]
	server          *gin.Engine
}

func ProvideAPI(
	quoteController rest.QuoteController[gin.Context], server2 *gin.Engine,
) *API {
	return &API{
		quoteController: quoteController,
		server:          server2,
	}
}

func ProvideHealthChecks(
	yeAPIHealthCheck yeapi.HealthCheck,
) []health.Config {
	return []health.Config{
		(health.Config)(yeAPIHealthCheck),
	}
}
